@page "/edit/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="todo-container">
    <div class="todo-card">
        <h2 class="text-center text-orange">Edit To-Do</h2>
        <EditForm Model="todo" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title" class="form-label text-white">Title</label>
                <InputText id="title" class="form-control form-control-sm bg-dark text-white"
                           @bind-Value="todo.Title" placeholder="Edit the title" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label text-white">Description</label>
                <InputTextArea id="description" class="form-control form-control-sm bg-dark text-white"
                               @bind-Value="todo.Description" placeholder="Edit the description" />
            </div>

            <div class="mb-3">
                <label for="duedate" class="form-label text-white">Due Date</label>
                <InputDate id="duedate" class="form-control form-control-sm bg-dark text-white"
                           @bind-Value="todo.DueDate" placeholder="Edit the Due Date" TValue="DateTime" />
            </div>

            <div class="mb-3">
                <label for="status" class="form-label text-white">Status</label>
                <InputCheckbox id="status" class="form-check-input bg-dark text-white"
                               @bind-Value="todo.IsCompleted" />
                <label class="form-check-label text-white ms-2" for="status">Mark as Completed</label>
            </div>

            <button class="btn btn-primary w-100 mt-3" type="submit">Save</button>
        </EditForm>
        <button class="btn btn-secondary w-100 mt-2" @onclick="Cancel">Cancel</button>
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    private TodoItem todo = new TodoItem();
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            todo = await Http.GetFromJsonAsync<TodoItem>($"api/Todo/{id}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to fetch the To-Do item: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Todo/{id}", todo);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = $"Failed to update the To-Do item. Status Code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while updating the To-Do item: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    public class TodoItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime DueDate{ get; set; }
        public bool IsCompleted { get; set; }
    }
}
