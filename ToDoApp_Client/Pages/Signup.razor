@page "/signup"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="auth-container">
    <div class="auth-card">
        <h2 class="text-center">Sign Up</h2>
        <EditForm Model="@newUser" OnValidSubmit="HandleSignup">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username">Username</label>
                <InputText id="username" class="form-control form-control-sm" @bind-Value="newUser.Username" placeholder="Choose a username" required />
            </div>
            <div class="mb-3">
                <label for="email">Email</label>
                <InputText id="email" class="form-control form-control-sm" @bind-Value="newUser.Email" placeholder="Enter your email" required />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText id="password" class="form-control form-control-sm" @bind-Value="newUser.Password" InputType="password" placeholder="Create a password" required />
            </div>
            <button class="btn btn-primary btn-sm w-100" type="submit">Sign Up</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="text-danger mt-3">@ErrorMessage</p>
        }

        <p class="text-center mt-3">
            Already have an account? <a href="/login" class="text-primary">Login</a>
        </p>
    </div>
</div>

@code {
    private SignupModel newUser = new SignupModel();
    private string ErrorMessage = string.Empty;

    private async Task HandleSignup()
    {
        try
        {
            Console.WriteLine("Sending signup request...");
            // Sending the signup request
            var response = await Http.PostAsJsonAsync("/api/auth/signup", newUser);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Signup successful.");
                Navigation.NavigateTo("/login");
            }
            else
            {
                // Log error details for debugging
                var errorResponse = await response.Content.ReadAsStringAsync();
                ErrorMessage = !string.IsNullOrEmpty(errorResponse)
                    ? errorResponse
                    : "Signup failed. Please try again.";
                Console.WriteLine($"Signup failed: {ErrorMessage}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            ErrorMessage = "Unable to reach the server. Please check your connection.";
            Console.WriteLine($"HTTP Exception: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred during signup.";
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public class SignupModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
